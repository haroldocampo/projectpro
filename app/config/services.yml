# Learn more about services, parameters and containers at
# https://symfony.com/doc/current/service_container.html
parameters:
    #parameter_name: value

services:
    # default configuration for services in *this* file
    _defaults:
        # automatically injects dependencies in your services
        autowire: true
        # automatically registers your services as commands, event subscribers, etc.
        autoconfigure: true
        # this means you cannot fetch services directly from the container via $container->get()
        # if you need to do this, you can override this setting on individual services
        public: false

    # makes classes in src/AppBundle available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    AppBundle\:
        resource: '../../src/AppBundle/*'
        # you can exclude directories or files
        # but if a service is unused, it's removed anyway
        exclude: '../../src/AppBundle/{Entity,Repository,Tests}'

    # controllers are imported separately to make sure they're public
    # and have a tag that allows actions to type-hint services
    AppBundle\Controller\:
        resource: '../../src/AppBundle/Controller'
        public: true
        tags: ['controller.service_arguments']

    # add more services, or override services that need manual wiring
    # AppBundle\Service\ExampleService:
    #     arguments:
    #         $someArgument: 'some_value'

    # AWS S3 Service
    marksegalle.aws_s3.client:
        class: Aws\S3\S3Client
        arguments:
          -
              version: 'latest'
              region: 'us-east-1'
              credentials:
                  key: 'AKIA46BNO5HMFIKPKHV7'
                  secret: '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'

    # ProjectPro services
    pp_user.registration:
        class: AppBundle\EventListener\RegistrationListener
        arguments: ["@router","@doctrine.orm.entity_manager", "@service_container"]
        tags:
            - { name: kernel.event_subscriber }

    pp_password.reset:
        class: AppBundle\EventListener\PasswordResetListener
        arguments: ["@router"]
        tags:
            - { name: kernel.event_subscriber }

    pp_employee.handler:
        class: AppBundle\Handler\EmployeeHandler
        arguments: ["@service_container"]
        public: true

    pp_util.handler:
        class: AppBundle\Handler\ProjectProUtilHandler
        arguments: ["@service_container"]
        public: true
